%YAML 1.2
---
name: PEG.js
file_extensions: ['pegjs']
scope: source.pegjs

variables:
  identifier: '[A-Za-z_$][A-Za-z_$0-9]+'

contexts:

  prototype:
    - include: comments

  main:
    - include: javascript
    - include: rule

  comments:
    - meta_scope: punctuation.definition.comment

    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.begin
      push:
        - meta_scope: comment.block.documentation
        - match: \*/
          scope: punctuation.definition.comment.end
          pop: true

    - match: /\*
      scope: punctuation.definition.comment.begin
      push:
        - meta_scope: comment.block
        - match: \*/
          scope: punctuation.definition.comment.end
          pop: true

    - match: //
      scope: comment.line.double-slash
      push:
        - match: $\n?
          pop: true

  javascript:
    - meta_include_prototype: false
    - match: \{
      scope: meta.block.js
      push: javascript.sublime-syntax
      with_prototype:
        - match: \}
          pop: true

  rule:
    - meta_scope: meta.block.productionset

    - match: \b({{identifier}})\b
      scope: constant.name.function
      push:
        - include: string

        - match: '='
          scope: keyword.operator.assignment
          push:
            - include: expression
            - include: javascript

    - match: ';'
      scope: punctuation.terminator.statement
      #pop: true

  expression:
    - include: labeled
    - include: regex
    - include: predicate
    - include: quantifier
    - include: choice
    - include: string

  labeled:
    - match: ({{identifier}})(:)
      captures:
        1: variable.parameter.function
        2: keyword.operator.assign

  regex:
    - match: \[
      scope: keyword.operator.regex
      push:
        - meta_include_prototype: false
        - match: \](i?)
          pop: true

  predicate:
    - match: ($|&|!)
      scope: keyword.operator.predicate
      #set: javascript

  quantifier:
    - match: (\?|\*|\+)
      scope: keyword.operator.quantifier
    #  pop: true
    #- include: javascript

  choice:
    - match: '/'
      scope: keyword.operator.productiondivider

  string:
    - match: ([\"\'])
      scope: punctuation.definition.string.quoted.begin
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted
        - match: \n
          scope: invalid.illegal.newline
          pop: true
        - match: \\.
          scope: constant.character.escape
        - match: \1
          scope: punctuation.definition.string.quoted.end
          pop: true
